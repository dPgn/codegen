X(arithmetic, Add, nodeid, nodeid)
X(arithmetic, Sub, nodeid, nodeid)
X(arithmetic, Mul, nodeid, nodeid)
X(arithmetic, Div, nodeid, nodeid)
X(wrnode, DivMod, nodeid, nodeid, nodeid, nodeid) // the modulo is written in the first argument, second is the high word of the dividend
X(wrnode, MulWiden, nodeid, nodeid, nodeid) // writes the high half of the result to the first argument

X(compare, Gt, nodeid, nodeid)
X(compare, Lt, nodeid, nodeid)
X(compare, Gte, nodeid, nodeid)
X(compare, Lte, nodeid, nodeid)
X(compare, Eq, nodeid, nodeid)
X(compare, Neq, nodeid, nodeid)

X(arithmetic, And, nodeid, nodeid)
X(arithmetic, Or, nodeid, nodeid)
X(arithmetic, Xor, nodeid, nodeid)

X(arithmetic, Neg, nodeid)
X(arithmetic, Not, nodeid)

X(wrnode, Move, nodeid, nodeid) // destination, source

// Memory accesses.
// Mem can be used as a destination or a source operand, and is useful in code generation for CISC
// ISAs. The optimizer is allowed to move Mem operations around by the same rules that apply to
// non-volatile memory accesses in C. Ld and St act like Move, with the source and the destination
// operand, respectively, being indirect. Optimizer is not allowed to move Ld or St in a way that
// would change their order.
X(node, Mem, nodeid, nodeid, word) // address, address space, type
X(wrnode, Ld, nodeid, nodeid, nodeid, word) // destination, address, address space, type
X(node, St, nodeid, nodeid, nodeid, word) // address, value, address space, type

// When a value must be in a register, it is wrapped in a node Reg. Semantically, a Reg is the same
// as its first (value) argument. The second argument is an architecture specific key that
// identifies either a specific register or a group of registers the actual register must be chosen
// from by the register allocator. After the register allocation phase, when IR code is passed to
// the architecture specific code generator, every Reg node must have a key that specifies a single
// register. Any Reg nodes coming from the client application are ignored by substituting them with
// their first (value) arguments; Reg nodes are only meant to be used internally by the library.
X(purenode, Reg, nodeid, word) // value, key (0 is used for any register of the appropriate type)

// Unstructured control flow is used both at the lowest (architecture) level and the highest
// (application) level. It is intuitive to programmers and maps nicely to how things work in
// machine code, but it is problematic to handle in optimizers, so it is converted to the
// structured variation below internally, and then back.
X(node, Label, nothing)
X(node, Mark, nodeid)
X(node, Branch, nodeid, nodeid) // label, condition
X(node, Jump, nodeid)

// Structured control flow is used internally by optimizers. Most compiler back-ends generate a
// control flow graph and analyze it. I find that too complicated, so instead I replace the free
// unstructured branches with three trivial primitives: conditional and unconditional forward jumps
// (Skip and SkipIf, Here), and uncoditional ("infinite") loops (Forever/Repeat). While the Repeat
// node does take the beginning of the loop (the Forever node) as an argument, it MUST refer to the
// last unclosed loop. In other words, loops can be nested, but they cannot partially overlap.
X(node, Skip, nothing)
X(node, SkipIf, nodeid)
X(node, Here, nodeid) // argument is Skip or SkipIf
X(node, Forever, nothing)
X(node, Repeat, nodeid) // argument is the Forever node

// type constructors
X(typecon, Int, word) // negative signed, positive unsigned, absolute value = number of bits; 0 = boolean
X(typecon, Float, word, word, word, word) // base, min exponent, max exponent, significant digits
X(typecon, Array, nodeid, word) // element type, size
X(typecon, Struct, args) // layout should be compatible with C structs on the platform
X(typecon, Tuple, args)  // layout undefined, pointers to members allowed
X(typecon, Packed, args) // layout optimized for smallest reasonable memory footprint
X(typecon, Union, args)
X(typecon, Ptr, nodeid)
X(typecon, Fun, word, nodeid, args) // calling convention id (0 = default), return type (-1 = none), argument types

// element access
X(purenode, Element, nodeid, nodeid) // object, index; index must be Imm for Struct, Tuple, Packed, and Union

// casts and conversion (type, value)
X(purenode, Cast, nodeid, nodeid) // reinterpret_cast
X(purenode, Conv, nodeid, nodeid) // number type conversions

// constants
X(purenode, Imm, word) // immediate integer
X(purenode, Str, args) // args are the characters
X(purenode, Data, word, args) // type of the data (Tuple, Struct, Packed, or Array), elements in order

// calling conventions
// TODO: figure out how to make use of red zones
X(node, Invoke, nodeid, args)
X(node, Enter, nodeid, args) // first argument is the type of the function, i.e. a Fun node; result is an object of the type; args are stack variable types
X(node, Exit, nodeid) // function to exit
X(purenode, Arg, nodeid, word) // function whose argument to read, index
X(purenode, RVal, nodeid) // function
X(purenode, Slot, nodeid, word) // address of a local variable: function, index

// A temporary variable, used by the library internally. Argument is the type of the variable.
X(purenode, Temp, nodeid)

// Register allocator passes these operations to the architecture layer. They have no semantical meaning.
X(node, RMove, word, word) // dst reg, src reg
X(node, RSwap, word, word) // reg, reg

// For debugging and implementing garbage collectors and zero-overhead exception handling. The
// second argument of Trace is an application specific key opaque to the codegen library and merely
// passed to a handler when execution is interrupted to read the values. The third argument is the
// value passed. The generated code is not required to actually store the value at run time, as
// long as it is able to reconstruct it when requested. This allows stack map like functionality
// without interfering with optimizations. Untrace takes the Trace node as an argument and ends the
// tracing. All remaining Trace nodes associated with a function are implicitly untraced at return
// (Exit node).
X(node, Trace, nodeid, word, nodeid) // function, key, value
X(node, Untrace, nodeid)

#undef X
